package org.firstinspires.ftc.teamcode;

import com.qualcomm.robotcore.eventloop.opmode.Autonomous;
import com.qualcomm.robotcore.eventloop.opmode.OpMode;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.Servo;

@Autonomous
public class LaunchLine_AUTO extends OpMode {
    //prepares needed hardware
    private DcMotor driveRF;//drive wheel located RIGHT FRONT
    private DcMotor driveRB;//drive wheel located RIGHT BACK
    private DcMotor driveLF;//drive wheel located LEFT FRONT
    private DcMotor driveLB;//drive wheel located LEFT BACK

    //private Servo cataDoor;//hinge to close the catapult for wobble goal

    @Override
    public void init() {
        //assigning each variable to its class
        driveRF = hardwareMap.get(DcMotor.class, "driveRF");
        driveRB = hardwareMap.get(DcMotor.class, "driveRB");
        driveLF = hardwareMap.get(DcMotor.class, "driveLF");
        driveLB = hardwareMap.get(DcMotor.class, "driveLB");

        //cataDoor = hardwareMap.get(Servo.class, "cataDoor");

        //set the direction for each motor
        //clockwise
        driveRF.setDirection(DcMotor.Direction.FORWARD);
        driveRB.setDirection(DcMotor.Direction.FORWARD);

        //cataDoor.setDirection(Servo.Direction.FORWARD);
        //counter-clockwise
        driveLF.setDirection(DcMotor.Direction.REVERSE);
        driveLB.setDirection(DcMotor.Direction.REVERSE);

        //reset any encoder values
        driveRF.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        driveRB.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        driveLF.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        driveLB.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);

        //give each motor an encoder
        driveRF.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        driveRB.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        driveLF.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        driveLB.setMode(DcMotor.RunMode.RUN_USING_ENCODER);

        telemetry.addData("Status", "Initialized");
        telemetry.update();
    }

    @Override
    public void loop() {
        //variables to act as power sources
        double /*x-axis power*/xPow, /*y-axis power*/yPow,/*strafing x-axis power*/rxPow;

        //set positions; calculations done on paper
        driveRF.setTargetPosition(9400);
        driveRB.setTargetPosition(9400);
        driveLF.setTargetPosition(9400);
        driveLB.setTargetPosition(9400);

        while (driveRF.getCurrentPosition() <= 9400)
        {
            driveRF.setPower(1.0);
            driveRB.setPower(1.0);
            driveLF.setPower(1.0);
            driveLB.setPower(1.0);
        }
        //turn off the motors
        driveRF.setPower(0.0);
        driveRB.setPower(0.0);
        driveLF.setPower(0.0);
        driveLB.setPower(0.0);
    }

    private void move(int ticks, double power, int direction)
    {
        /**
         * Here's how the directions work according to a clock:
         * 1: 1:30*
         * 2: 3:00*
         * 3: 4:30
         * 4: 6:00*
         * 5: 7:30
         * 6: 9:00
         * 7: 10:30
         * default: 12:00*
         * 
         * For explanation of code, look at the comments on the default case
         */
        switch (direction)
        {
            case 1:
                driveRF.setTargetPosition(ticks);
                driveLB.setTargetPosition(ticks);

                while (driveRF.getCurrentPosition() <= ticks)
                {
                    driveRF.setPower(power);
                    driveRB.setPower(0.0);
                    driveLF.setPower(0.0);
                    driveLB.setPower(power);
                }

                driveRF.setPower(0.0);
                driveRB.setPower(0.0);
                driveLF.setPower(0.0);
                driveLB.setPower(0.0);
                break;
            case 2:
                driveRF.setTargetPosition(ticks);
                driveRB.setTargetPosition(-ticks);
                driveLF.setTargetPosition(-ticks);
                driveLB.setTargetPosition(ticks);

                while (driveRF.getCurrentPosition() >= ticks)
                {
                    driveRF.setPower(power);
                    driveRB.setPower(-power);
                    driveLF.setPower(-power);
                    driveLB.setPower(power);
                }

                driveRF.setPower(0.0);
                driveRB.setPower(0.0);
                driveLF.setPower(0.0);
                driveLB.setPower(0.0);
                break;
            case 3:

            case 4:
                ticks = -ticks;

                driveRF.setTargetPosition(ticks);
                driveRB.setTargetPosition(ticks);
                driveLF.setTargetPosition(ticks);
                driveLB.setTargetPosition(ticks);

                while (driveRF.getCurrentPosition() >= ticks)
                {
                    driveRF.setPower(power);
                    driveRB.setPower(power);
                    driveLF.setPower(power);
                    driveLB.setPower(power);
                }

                driveRF.setPower(0.0);
                driveRB.setPower(0.0);
                driveLF.setPower(0.0);
                driveLB.setPower(0.0);
                break;
            case 5:

            case 6:

            case 7:

            default:
                //set the position of each motor to the desired amount
                //use math from paper in engineering notebook
                driveRF.setTargetPosition(ticks);
                driveRB.setTargetPosition(ticks);
                driveLF.setTargetPosition(ticks);
                driveLB.setTargetPosition(ticks);

                //run the motors until the correct position is reached
                while (driveRF.getCurrentPosition() <= ticks)
                {
                    driveRF.setPower(power);
                    driveRB.setPower(power);
                    driveLF.setPower(power);
                    driveLB.setPower(power);
                }

                //turn off the motors
                driveRF.setPower(0.0);
                driveRB.setPower(0.0);
                driveLF.setPower(0.0);
                driveLB.setPower(0.0);
                break;
        }
    }
}
